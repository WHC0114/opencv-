#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/opencv.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <iostream>
#include <math.h>

using namespace std;
using namespace cv;

Mat g_grayimg, g_dstimg;
int g_ThresholdValue = 100;
const double PI = atan(1.)*4.;

bool isSomeColor(Mat colorRoi);
bool isCircle(const Mat srcBw, Mat& mytemp);
void RGB2HSV(double red, double green, double blue, double& hue, double& saturation,double& intensity);

int main()
{

	//--------------读取原图----------//
	Mat img;
	img = imread("E:/RM.jpg");
	Mat copy;
	img.copyTo(copy);//备份


					 //--------------色彩分割	-----------------//
	Mat tempImg = Mat::zeros(img.size(), CV_8UC1);
	Mat tempImgCopy;//后面roi无效区域检测要用
	cvtColor(img, g_grayimg, COLOR_RGB2GRAY);
	threshold(g_grayimg, tempImg, 120, 255, THRESH_OTSU);
	imshow("threshold", tempImg);

	//------------形态学运算---------------------//
	Mat ELLimg;
	Mat elementE = getStructuringElement(MORPH_RECT, Size(2 * 1 + 1, 2 * 1 + 1), Point(1, 1));
	/*这里有点小问题 MORPH_ELLIPSE应该是椭圆 在定义上等于2 刚刚好等于开操作即这里是做的是开操作 开操作可以降噪*/
	morphologyEx(tempImg, ELLimg, MORPH_ELLIPSE, elementE);
	imshow("ELLimg", ELLimg);
	ELLimg.copyTo(tempImgCopy);
	//-----------找轮廓-----------------//
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;
	/*只检测最外层轮廓*/
	findContours(ELLimg, contours, hierarchy, CV_RETR_EXTERNAL,
		CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
	Mat drawing1 = Mat::zeros(ELLimg.size(), CV_8UC3);
	for (int i = 0; i < contours.size(); i++)
	{
		Scalar color = Scalar(0, 0, 255);
		drawContours(drawing1, contours, i, color, 1, 8, vector<Vec4i>(), 0, Point());
	}
	imshow("Contours", drawing1);

	//----------获取矩形和圆形边界框-----------//  
	vector<Rect> boundRect(contours.size());
	vector<Rect> colorRect(contours.size());
	vector<Point2f>center(contours.size());
	vector<float>radius(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		boundRect[i] = boundingRect(Mat(contours[i]));
		//colorRect[i] = Rect(center[i].x,center[i].y,boundRect[i].width + radius[i], boundRect[i].height + radius[i]);//定位灯条位置，存误
		minEnclosingCircle(contours[i], center[i], radius[i]);
		Scalar color = Scalar(0, 255, 0);
		//绘制轮廓和检测到的轮廓外接矩形  
		rectangle(drawing1, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);

	}
	imshow("rect", drawing1);


	Mat drawing = Mat::zeros(tempImg.size(), CV_8UC3);
	for (int i = 0; i < contours.size(); i++)
	{
		Rect rect = boundRect[i];
		//-------------进行一定的限制，筛选出区域-------------//
		//高宽比限制  
		float ratio = (float)rect.width / (float)rect.height;
		//轮廓面积  		
		float Area = (float)rect.width * (float)rect.height;
		float dConArea = (float)contourArea(contours[i]);
		float dConLen = (float)arcLength(contours[i], 1);
		/*将矩形面积小于一定方围的排除*/
		if (dConArea < 250)//ROI 区域面积限制  面积会被距离限制，说明此筛选方法不够完美
			continue;
		/*判断所有选出来的矩形 将不符合比例的矩形排除*/
		if (ratio > 1.5 || ratio < 0.5)//ROI 区域宽高比限制  
			continue;


		//-----------------roi无效区域检测或霍夫圆检测+圆度检测-----------------//
		Mat roiImg;
		tempImgCopy(rect).copyTo(roiImg);
		//imshow("testwwwww", roiImg);
		Mat temp;
		copy(rect).copyTo(temp);
		//imshow("test2",temp);
		bool iscircle = isCircle(roiImg, temp);//roi无效区域检测
		cout << "circle:" << iscircle << endl;
		if (!iscircle)
			continue;

		float C = (4 * PI*dConArea) / (dConLen*dConLen);
		if (C < 0.3)//利用圆度对形状进行筛选
			continue;
		//开始推算灯条位置
		//Mat roiColor=copy(Rect(colorRect[i]));
		//cout << center[i].x, center[i].y, boundRect[i].width + radius[i], boundRect[i].height + radius[i] << endl;
		cout << "灯条矩形框左上x坐标 " << boundRect[i].tl().x << endl;
		cout << "" << endl;
		cout << "灯条矩形框左上y坐标  " << boundRect[i].tl().y << endl;
		cout << "" << endl;
		Rect R1(boundRect[i].tl().x - 2 * radius[i], boundRect[i].tl().y, boundRect[i].width + 4 * radius[i], boundRect[i].height + radius[i]);
		Mat roiColor;
		copy(R1).copyTo(roiColor);
		imshow("colorTest", roiColor);
		/*判断敌我  该函数在判断的是红色 下面的if语句中 看实际情况输出*/
		if (isSomeColor(roiColor))
			cout << "敌方" << endl;
		else
			cout << "敌方" << endl;
		Scalar color = Scalar(0, 255, 0);
		//绘制轮廓和检测到的轮廓外接矩形  
		/*这里绘制了灯所在的矩形和装甲板上园所在的矩形*/
		drawContours(drawing, contours, i, color, 1, 8, vector<Vec4i>(), 0, Point());
		rectangle(drawing, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);
		rectangle(img, R1.tl(), R1.br(), color, 2, 8, 0);
		rectangle(img, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);
		char tam[100];
		/*在园的中心标出它的坐标 即圆心坐标*/
		sprintf(tam, "(%0.0f, %0.0f)", center[i].x, center[i].y);
		putText(drawing, tam, center[i], FONT_HERSHEY_SIMPLEX, 0.8, cvScalar(255, 0, 255), 1);
		cout << "装甲板中心x坐标 " << center[i].x << endl;
		cout << "" << endl;
		cout << "装甲板中心y坐标 " << center[i].y << endl;
	}
	imshow("drwaing", drawing);
	imshow("img", img);

	char key = (char)waitKey(3000000);
	if (key == 27)
		return 1;

}


/*将图像的RGB和HSV的值全部输出*/
void RGB2HSV(double red, double green, double blue, double& hue, double& saturation,
	double& intensity)
{
	double r, g, b;
	double h, s, i;
	double sum;
	double minRGB, maxRGB;
	double theta;
	r = red / 255.0;
	g = green / 255.0;
	b = blue / 255.0;
	/*RGB转换到HSV的算法*/
	minRGB = ((r < g) ? (r) : (g));
	minRGB = (minRGB < b) ? (minRGB) : (b);
	maxRGB = ((r > g) ? (r) : (g));
	maxRGB = (maxRGB > b) ? (maxRGB) : (b);
	sum = r + g + b;
	i = sum / 3.0;
	if (i < 0.001 || maxRGB - minRGB < 0.001)
	{
		h = 0.0;
		s = 0.0;
	}
	else
	{
		s = 1.0 - 3.0*minRGB / sum;
		theta = sqrt((r - g)*(r - g) + (r - b)*(g - b));
		theta = acos((r - g + r - b)*0.5 / theta);
		if (b <= g)
			h = theta;
		else
			h = 2 * PI - theta;
		if (s <= 0.01)
			h = 0;
	}
	hue = (int)(h * 180 / PI);
	saturation = (int)(s * 100);
	intensity = (int)(i * 100);
}

/*把分割出来的矩形分成等四分 然后计算每一份中 有效像素和无效像素的比例 通过比例来确认这个是不是一个较完整的园 //有效像素是指像素值不为0的像素*/
bool isCircle(const Mat srcBw, Mat& mytemp)//（待改进）  
{//输入的是一个灰度图像  
	Mat temp = Mat::zeros(srcBw.size(), CV_8UC1);;
	bool iscircle = false;
	//获得 srcBw 信息  
	int w = srcBw.cols;
	int h = srcBw.rows;
	int count1 = 0;//各部分的缺失像素计数器  
	int count2 = 0;
	int count3 = 0;
	int count4 = 0;
	//将 srcBw 平均分成四份,进行访问缺失的像素个数、所占比重  
	//先访问左上  
	
	for (int i = 0; i < h / 2; i++)
	{
		for (int j = 0; j < w / 2; j++)
		{
			if (srcBw.at<uchar>(i, j) == 0)
			{
				temp.at<uchar>(i, j) = 255;
				mytemp.at<uchar>(i, j) = 255;
				count1++;
			}
		}
	}
	//右上  
	for (int i = 0; i < h / 2; i++)
	{
		for (int j = w / 2 - 1; j < w; j++)
		{
			if (srcBw.at<uchar>(i, j) == 0)
			{
				temp.at<uchar>(i, j) = 255;
				mytemp.at<uchar>(i, j) = 255;
				count2++;
			}
		}
	}
	//左下  
	for (int i = h / 2 - 1; i < h; i++)
	{
		for (int j = 0; j < w / 2; j++)
		{
			if (srcBw.at<uchar>(i, j) == 0)
			{
				temp.at<uchar>(i, j) = 255;
				mytemp.at<uchar>(i, j) = 255;
				count3++;
			}
		}
	}
	//右下  
	for (int i = h / 2 - 1; i < h; i++)
	{
		for (int j = w / 2 - 1; j < w; j++)
		{
			if (srcBw.at<uchar>(i, j) == 0)
			{
				temp.at<uchar>(i, j) = 255;
				mytemp.at<uchar>(i, j) = 255;
				count4++;
			}
		}
	}
	float c1 = (float)count1 / (float)(w*h);//左上  
	float c2 = (float)count2 / (float)(w*h);//右上  
	float c3 = (float)count3 / (float)(w*h);//左下  
	float c4 = (float)count4 / (float)(w*h);//右下  
	cout << "result: " << c1 << "," << c2
		<< "," << c3 << "," << c4 << endl;
	//限定每个比率的差值范围  
	if ((c1 > 0.037&&c1 < 0.12) && (c2 > 0.037&&c2 < 0.12) && (c2 > 0.037&&c2 < 0.12) && (c2 > 0.037
		&&c2 < 0.12))
	{
		//限制差值,差值比较容错，相邻块之间差值相近，如左上=右上&&左下=右下或左上=左下&&右上=右下  
		if ((abs(c1 - c2) < 0.04&&abs(c3 - c4) < 0.04) || (abs(c1 - c3) < 0.04&&abs(c2 - c4) < 0.04))
		{
			iscircle = true;
		}
	}
	return iscircle;
}

/*判断矩形内的灯的颜色 根据HSV的值判断 //判断敌我*/
bool isSomeColor(Mat colorRoi) {
	bool isSomeColor = false;
	int width = colorRoi.cols;   //图像宽度
	int height = colorRoi.rows;
	double B = 0.0, G = 0.0, R = 0.0, H = 0.0, S = 0.0, V = 0.0;
	Mat Mat_rgb = Mat::zeros(colorRoi.size(), CV_8UC1);
	Mat Mat_rgb_copy;//一个暂存单元
	int x, y, px, py; //循环
	for (y = 0; y<height; y++)
	{
		for (x = 0; x<width; x++)
		{
			// 获取BGR值
			B = colorRoi.at<Vec3b>(y, x)[0];
			G = colorRoi.at<Vec3b>(y, x)[1];
			R = colorRoi.at<Vec3b>(y, x)[2];
			RGB2HSV(R, G, B, H, S, V);
			//红色：337-360 改颜色
			if ((H >= 337 && H <= 360 || H >= 0 && H <= 10) && S >= 12 && S <= 100 && V > 20 && V < 99)
			{
				Mat_rgb.at<uchar>(y, x) = 255;  //R  
				isSomeColor = true;
			}
		}
	}
	return isSomeColor;
}