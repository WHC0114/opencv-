#include <opencv2/opencv.hpp>
#include <math.h>

using namespace std;
using namespace cv;

int main()
{
	Mat src = imread("E:/RM3.png");
	if (!src.data)
	{
		printf_s("no input");
		return -1;
	}
	namedWindow("input", CV_WINDOW_AUTOSIZE);
	imshow("input", src);

	vector<Mat>	img;
	split(src, img);
	for (int i = 0; i < 3; i++)
	{
		equalizeHist(img[i], img[i]);
	}
	merge(img, src);


	Mat g_src;
	Mat last_src;
	Mat output;
	last_src = src.clone();
	g_src = src.clone();
	output = src.clone();
	Mat dst;
	Mat result;
	result = src.clone();

	//获取灯外围那层明显的黄色
	inRange(src, Scalar(90, 200, 220), Scalar(255, 255, 255), dst);
	namedWindow("inRange", CV_WINDOW_AUTOSIZE);
	//将特征腐蚀
	Mat kernel = getStructuringElement(MORPH_RECT, Size(5, 5), Point(-1, -1));
	//morphologyEx(dst, dst, MORPH_OPEN, kernel);
	//morphologyEx(dst, dst, MORPH_CLOSE, kernel);
	dilate(dst, dst, kernel);
	imshow("inRange", dst);

	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;

	//找到轮廓并将其画出来
	findContours(dst, contours, RETR_LIST, CHAIN_APPROX_SIMPLE);
	drawContours(result, contours, -1, Scalar(255, 0, 0), 0.1, 8);

	namedWindow("result", CV_WINDOW_AUTOSIZE);
	imshow("result", result);

	//将图片的和灯内像素值接近的点提取
	vector<Point> points;
	for (int row = 0; row < g_src.rows; row++)
	{
		for (int col = 0; col < g_src.cols; col++)
		{
			int b = g_src.at<Vec3b>(row, col)[0];
			int g = g_src.at<Vec3b>(row, col)[1];
			int r = g_src.at<Vec3b>(row, col)[2];
			if (b >= 0 && b <= 255 && g >= 0 && g <= 60 && r > 230)
			{
				//printf_s("(%d,%d)\n", row, col);
				g_src.at<Vec3b>(row, col)[0] = 255;
				g_src.at<Vec3b>(row, col)[1] = 255;
				g_src.at<Vec3b>(row, col)[2] = 255;
				Point p;
				p.x = col;
				p.y = row;
				points.push_back(p);
			}
			else
			{
				g_src.at<Vec3b>(row, col)[0] = 0;
				g_src.at<Vec3b>(row, col)[1] = 0;
				g_src.at<Vec3b>(row, col)[2] = 0;
			}
		}
	}


	Mat kernel1 = getStructuringElement(MORPH_RECT,Size(3,3),Point(-1,-1));
	morphologyEx(g_src, g_src, MORPH_OPEN, kernel1);
	morphologyEx(g_src, g_src, MORPH_CLOSE, kernel1);
	imshow("g_src", g_src);
	cvtColor(g_src, g_src, CV_BGR2GRAY);
	//threshold(g_src, g_src, 120, 255, THRESH_BINARY|THRESH_OTSU);
	vector<vector<Point>> next;
	findContours(g_src, next, RETR_TREE, CHAIN_APPROX_SIMPLE);
	drawContours(g_src, next,-1,Scalar(255,255,255),0.1);

	namedWindow("findContours",CV_WINDOW_AUTOSIZE);
	imshow("findContours", g_src);


	Mat kk = Mat::zeros(g_src.size(), CV_8UC3);
	//g_src.convertTo(kk,CV_8UC3);
	vector<RotatedRect> box(next.size());
	Point2f rect[4];
	vector<Point> centers;
	vector<RotatedRect> new_box;
	vector<vector<Point>> last_next(next.size());
 	for (int i = 0; i < next.size(); i++)
	{
		//approxPolyDP(Mat(next[i]), last_next[i], 10, false);
		box[i] = minAreaRect(Mat(next[i]));
		circle(kk, box[i].center, 5, Scalar(0, 0, 255), 2);
		centers.push_back(box[i].center);
	}
	namedWindow("circle", CV_WINDOW_AUTOSIZE);
	imshow("circle", kk);



	for (int i = 0; i < contours.size(); i++)
	{
		for (int j = 0; j < centers.size(); j++)
		{
			if (pointPolygonTest(contours[i], box[j].center, false) == 1)
			{
				box[j].points(rect);
				new_box.push_back(box[j]);
				for (int p = 0; p < 4; p++)
				{
					line(kk, rect[p], rect[(p + 1) % 4], Scalar(0, 255, 0), 1);
				}
			}
		}
	}
	imshow("line", kk);


	Point2f rect2[4];
	float min_x = 0;
	float min_y = 0;
	float max_x = 10000;
	float max_y = 10000;
	vector<RotatedRect> last_box;
	for (int i = 0; i < new_box.size(); i++)
	{
		new_box[i].points(rect2);
		for (int j = 0; j < 4; j++) 
		{
			min_y = MIN(rect2[j].y, min_y);
			max_y = MAX(rect2[j].y, max_y);
			min_x = MIN(rect2[j].x, min_x);
			max_x = MAX(rect2[j].x, max_x);
		}
		if (abs(min_x - max_x) < abs(max_y - min_y)*0.6)
		{
			last_box.push_back(new_box[i]);
			//rectangle(kk, Point(min_x, min_y), Point(max_x, max_y), Scalar(0,255,0),2);
			//printf_s("(%.3f,%.3f)(%.3f,%.3f)\n",min_x,max_x,min_y,max_y);
		}

		min_y = 10000;
		min_x = 10000;
		max_y = 0;
		max_x = 0;
	}




	/*for (int k = 0; k < last_box.size(); k++) 
	{
		printf_s("%.3f,%.3f\n", last_box[k].center.x, last_box[k].center.y);
	}	*/
	
	
	Point2f rect_last[4];
	vector<RotatedRect> result_box;
	bool c = false;
	for (int i = 0; i < last_box.size(); i++)
	{
		last_box[i].points(rect_last);
		for (int j = (last_box.size() - 1); j != i; j--)
		{
			if (last_box[i].center == last_box[j].center)
			{
				c=true;
			}

		}
		if(c==false)
			result_box.push_back(last_box[i]);
		
		c = false;		
	}
	namedWindow("last_box",CV_WINDOW_AUTOSIZE);
	imshow("last_box",kk);

	double K_center;
	double K1_angle;
	double K2_angle;
	double angle_first;
	double angle_next;
	double number_K1;
	double number_K2;
	Point2f rect_return_one[4];
	Point2f rect_return_two[4];
	int K_angle;
	int K_sum;


	printf_s("%d\n", result_box.size());


	for (int i = 0; i < result_box.size(); i++)
	{
		result_box[i].points(rect_return_one);
		result_box[(i + 1) % result_box.size()].points(rect_return_two);
		//printf_s("%.3f\n", result_box[i].angle);
		for (int j = (result_box.size() - 1); j != i; j--)
		{
				angle_first = result_box[i].angle;
				angle_next = (double)result_box[j].angle;
				K_center = (result_box[i].center.y - result_box[j].center.y) / (result_box[i].center.x - result_box[j].center.x);
			
				
				
				printf_s("%.3f, %.3f\n", angle_first, angle_next);
				
				if (angle_first == 0 || angle_next == 0)
				{			
					if (abs(K_center) < 0.5&&abs(angle_first - angle_next) < 0.5)
					{
						line(kk, result_box[i].center, result_box[j].center, Scalar(0, 0, 255), 2);
						circle(kk, Point((result_box[i].center.x + result_box[j].center.x) / 2, (result_box[i].center.y + result_box[j].center.y) / 2), 5, Scalar(255, 255, 255), 3);
					}
					continue;
				
				}
				number_K1 = tan(angle_first);
				number_K2 = tan(angle_next);
				
					//printf_s("%.3f\n", K_center);


				//printf_s("%d , %d\n", i, j);
				line(kk, result_box[i].center, result_box[j].center, Scalar(255, 0, 0), 2);

				K_angle = cvRound(result_box[i].angle - result_box[j].angle);
				K_sum = cvRound(abs(result_box[i].angle) + abs(result_box[j].angle));
				K1_angle = number_K1*K_center;
				K2_angle = number_K2*K_center;

					//printf_s("%.3f\n", K_center);
					printf_s("垂直：%.3f,%.3f,两角差距：%d 两角和：%d\n", K1_angle, K2_angle, K_angle, K_sum);

				if (abs(K_angle) <= 4 && abs(K1_angle) <= 1 && abs(K2_angle) <= 1)
				{
					circle(kk, Point((result_box[i].center.x + result_box[j].center.x) / 2, (result_box[i].center.y + result_box[j].center.y) / 2), 5, Scalar(255, 255, 255), 3);
				}
		}
		
	}

	namedWindow("目标点",CV_WINDOW_AUTOSIZE);
	imshow("目标点",kk);

	//double tg = tan(-90);


	waitKey(0);
	return 0;
}

